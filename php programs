1. Show the output for the following snippet.
<? php
$capital=67;
print(“Variable capital is $capital”);
print(“Variable CaPiTaL is $CaPiTaL”);
?> 
Output:
Variable capital is 67
Variable capital is

2. Create a PHP program to display the division table using for-loop.
1 2 3
1 1 0.5 0.33
2 2 1 0.66
3 3 1.5 1
Answer:
<?php
echo "  1 2 3\n";
for ($i = 1; $i <= 3; $i++) {
    echo $i . " ";
    for ($j = 1; $j <= 3; $j++) {
        $result = $i / $j;
        echo round($result, 2) . " ";
    }
    echo "\n";
}
?>

4.Predict the output of the following snippet:
$animal = “antelope”; $animal_heads = 1; $animal_legs = 4;
echo“The $animal has $animal_heads head(s).”;
echo“The $animal has $animal_legs leg(s).”;

 Output:The antelope has 1 head(s).The antelope has 4 leg(s).

5. You are building a website where users can calculate the total cost of their purchases.
Write a PHP program that takes the price and quantity of three items from the user and
calculates the subtotal, tax (10% of the subtotal),and the total cost (subtotal + tax).
Display the results to the user.

Code:
<?php
$price1 = 100;
$qty1   = 2;

$price2 = 50;
$qty2   = 3;

$price3 = 20;
$qty3   = 5;

$subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
$tax = $subtotal * 0.10;
$total = $subtotal + $tax;

Output:
Subtotal: Rs. 450
Tax (10%): Rs. 45
Total: Rs. 495

7.Create a form which takes the name of the user as input and prints a greeting in the format
given below and if the user submits the form with the name field blank, it prints an
appropriate error message.

Hello, Welcome to Everyone!
Have a nice day!!

Code:
<?php
echo "Enter your name: ";
$name = trim(fgets(STDIN));

if (empty($name)) {
    echo "Please enter your name.\n";
} else {
    echo "Hello $name, Welcome to Everyone!\n";
    echo "Have a nice day!!\n";
}
?>

Output:
Enter your name: janani
Hello janani, Welcome to Everyone!
Have a nice day!!


8. A customer visits a shop to buy a soft drink; he has two options:
Drink A cost is Rs.25 and the size of the bottle is 11.
Drink B cost is Rs.23 and its size of the bottle is 9.
Which drink should he choose to save money? Solve this problem using function deal ( ).

Code:
<?php
function deal() {
    
    $costA = 25;
    $sizeA = 11;
    $valueA = $costA / $sizeA;  

    $costB = 23;
    $sizeB = 9;
    $valueB = $costB / $sizeB;  

    if ($valueA < $valueB) {
        echo "Choose Drink A to save money.\n";
    } elseif ($valueB < $valueA) {
        echo "Choose Drink B to save money.\n";
    } else {
        echo "Both drinks offer the same value.\n";
    }
}

deal();
?>

Output:
Choose Drink A to save money.

9. Predict the output of the following snippet:
$this = “this”; $that = “that”; $the_other = 2.2000000000;
print(“$this,$not_set,$that+$the_other”);

Output:this,,that+2.2

10. Develop a program to check student grades based on marks using a loop.

Code:
<?php
$number_of_students = 3;

for ($i = 1; $i <= $number_of_students; $i++) {
    echo "Enter marks for student $i (0-100): ";
    $marks = trim(fgets(STDIN));

    if (!is_numeric($marks) || $marks < 0 || $marks > 100) {
        echo "Invalid marks entered. Please enter a number between 0 and 100.\n";
        continue; 
    }

    if ($marks >= 90) {
        $grade = "A";
    } elseif ($marks >= 80) {
        $grade = "B";
    } elseif ($marks >= 70) {
        $grade = "C";
    } elseif ($marks >= 60) {
        $grade = "D";
    } else {
        $grade = "F";
    }

    echo "Student $i Grade: $grade\n";
}
?>

Output:
Enter marks for student 1 (0-100): 95
Student 1 Grade: A
Enter marks for student 2 (0-100): 75
Student 2 Grade: C
Enter marks for student 3 (0-100): 65
Student 3 Grade: D

11. Develop a PHP program to show days of the week using switch cases.

Code:
<?php
echo "Enter a number (1 to 7) to get the day of the week: ";
$day_number = trim(fgets(STDIN));

switch ($day_number) {
    case 1:
        echo "Monday\n";
        break;
    case 2:
        echo "Tuesday\n";
        break;
    case 3:
        echo "Wednesday\n";
        break;
    case 4:
        echo "Thursday\n";
        break;
    case 5:
        echo "Friday\n";
        break;
    case 6:
        echo "Saturday\n";
        break;
    case 7:
        echo "Sunday\n";
        break;
    default:
        echo "Invalid input. Please enter a number between 1 and 7.\n";
        break;
}
?>

Output: 
Enter a number (1 to 7) to get the day of the week: 1
Monday

12. Write a program to check student grade based on marks:
Conditions:
If marks are 75% or more, the grade will be First Class.
If marks between 60% to 74%, grade will be second class.
If marks between 40% to 59%, grade will be third class.
If marks are less than 40%, students will be Fail.

Code:
<?php
echo "Enter student's marks (in percentage): ";
$marks = trim(fgets(STDIN));

if (!is_numeric($marks) || $marks < 0 || $marks > 100) {
    echo "Invalid input. Please enter a number between 0 and 100.\n";
} else {
    if ($marks >= 75) {
        echo "Grade: First Class\n";
    } elseif ($marks >= 60) {
        echo "Grade: Second Class\n";
    } elseif ($marks >= 40) {
        echo "Grade: Third Class\n";
    } else {
        echo "Grade: Fail\n";
    }
}
?>

Output:
Enter student's marks (in percentage): 82
Grade: First Class

15. Create a PHP program to compute the sum of the digits of a number.

Code:
<?php
echo "Enter a number: ";
$number = trim(fgets(STDIN));

$sum = 0;

while ($number > 0) {
    $digit = $number % 10;     
    $sum += $digit;            
    $number = (int)($number / 10);  
}

echo "Sum of digits: $sum\n";
?>

Output:
Enter a number: 54
Sum of digits: 9

16. Write a PHP function that takes two numbers as input and returns the sum of those
numbers. Display the result on the webpage, when a button is clicked.

Code:
<?php
function addNumbers($a, $b) {
    return $a + $b;
}

echo "Enter first number: ";
$num1 = trim(fgets(STDIN));

echo "Enter second number: ";
$num2 = trim(fgets(STDIN));

$sum = addNumbers($num1, $num2);
echo "The sum is: $sum\n";
?>

Output:
Enter first number: 10
Enter second number: 30
The sum is: 40

17. Examine the various control structures in php and construct a bank transaction problem
with customers deposit and withdrawal of amount.

Code:
<?php
$balance = 1000; 

function showMenu() {
    echo "\nChoose an option:\n";
    echo "1. Deposit\n";
    echo "2. Withdraw\n";
    echo "3. Check Balance\n";
    echo "4. Exit\n";
    echo "Enter your choice: ";
}

while (true) {
    showMenu();
    $choice = trim(fgets(STDIN));

    switch ($choice) {
        case 1:
            echo "Enter deposit amount: ";
            $deposit = trim(fgets(STDIN));
            if ($deposit > 0) {
                $balance += $deposit;
                echo "Amount deposited successfully.\n";
            } else {
                echo "Invalid amount!\n";
            }
            break;

        case 2:
            echo "Enter withdrawal amount: ";
            $withdraw = trim(fgets(STDIN));
            if ($withdraw > 0 && $withdraw <= $balance) {
                $balance -= $withdraw;
                echo "Amount withdrawn successfully.\n";
            } else {
                echo "Invalid or insufficient balance!\n";
            }
            break;

        case 3:
            echo "Your current balance is: Rs. $balance\n";
            break;

        case 4:
            echo "Thank you for banking with us!\n";
            exit;

        default:
            echo "Invalid choice! Please enter 1 to 4.\n";
    }
}
?>

Output:
Choose an option:
1. Deposit
2. Withdraw
3. Check Balance
4. Exit
Enter your choice: 3
Your current balance is: Rs. 1000

Choose an option:
1. Deposit
2. Withdraw
3. Check Balance
4. Exit
Enter your choice: 4
Thank you for banking with us!

18. IsSet() function in PHP with example.

Code:
<?php
$name = "Janani";

if (isset($name)) {
    echo "The variable \$name is set and its value is: " . $name;
} else {
    echo "The variable \$name is not set.";
}
?>

Output:
The variable $name is set and its value is: Janani

19. Examine a PHP function that accepts an array of numbers and returns the highest and
lowest values in that array. Display the results on the webpage.

Code:
<?php
function findHighLow($numbers) {
    $highest = max($numbers);
    $lowest = min($numbers);

    echo "Highest number is: " . $highest . "<br>";
    echo "Lowest number is: " . $lowest;
}

$myNumbers = [12, 45, 7, 89, 23, 5, 67];

findHighLow($myNumbers);
?>

Output:
Highest number is: 89<br>Lowest number is: 5

21. Construct a PHP function that checks if a given year is a leap year and returns true or
false accordingly.

Code:
<?php
function isLeapYear($year) {
    if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
        return true;
    } else {
        return false;
    }
}

$year = 2024;

if (isLeapYear($year)) {
    echo "$year is a leap year.";
} else {
    echo "$year is not a leap year.";
}
?>

Output:
2024 is a leap year.

22. Create a PHP script that counts the number of occurrences of a specific word in a given
string.

Code:
<?php
$text = "PHP is easy. PHP is powerful. I love PHP!";
$word = "PHP";

$count = substr_count($text, $word);

echo "The word '$word' appears $count times in the string.";
?>

Output:
The word 'PHP' appears 3 times in the string.

23. Prioritize the use of GET and POST arguments in PHP with a real time example.

Code:
<?php
$_GET['color'] = "Blue";
$_POST['name'] = "JANANI";

echo "GET: Your favorite color is " . $_GET['color'] . "\n";
echo "POST: Hello, " . $_POST['name'] . "!";
?>

Output:
GET: Your favorite color is Blue
POST: Hello, JANANI!

24. Write a PHP script to manipulate the strings with all the string functions.

Code:
<?php
$str = "  Hello World! Welcome to PHP.  ";

$trimmed = trim($str);

$lower = strtolower($trimmed);
$upper = strtoupper($trimmed);

$length = strlen($trimmed);

$wordCount = str_word_count($trimmed);

$replaced = str_replace("World", "Friend", $trimmed);

$reversed = strrev($trimmed);

$pos = strpos($trimmed, "PHP");

$sub = substr($trimmed, 6, 5);

echo "Original: '$str'\n";
echo "Trimmed: '$trimmed'\n";
echo "Lowercase: $lower\n";
echo "Uppercase: $upper\n";
echo "Length: $length\n";
echo "Word count: $wordCount\n";
echo "Replace: $replaced\n";
echo "Reversed: $reversed\n";
echo "Position of 'PHP': $pos\n";
echo "Substring: $sub\n";
?>

Output:
Original: '  Hello World! Welcome to PHP.  '
Trimmed: 'Hello World! Welcome to PHP.'
Lowercase: hello world! welcome to php.
Uppercase: HELLO WORLD! WELCOME TO PHP.
Length: 28
Word count: 5
Replace: Hello Friend! Welcome to PHP.
Reversed: .PHP ot emocleW !dlroW olleH
Position of 'PHP': 24
Substring: World

25. Construct a PHP script to replace the first ‘the’ of the following string with ‘best’. Data:
“The Thing will come to you soon”

Code:
<?php
$text = "The Thing will come to you soon";

$result = preg_replace('/The/', 'Best', $text, 1);

echo $result;
?>

Output:
Best Thing will come to you soon


27. Articulate the mathematical operators with suitable examples in PHP.

Code:
<?php
$a = 12;
$b = 5;

echo "a = $a, b = $b\n";
echo "Addition (+): " . ($a + $b) . "\n";
echo "Subtraction (-): " . ($a - $b) . "\n";
echo "Multiplication (*): " . ($a * $b) . "\n";
echo "Division (/): " . ($a / $b) . "\n";
echo "Modulus (%): " . ($a % $b) . "\n";
echo "Exponentiation (*): " . ($a * $b) . "\n";
?>

Output:
a = 12, b = 5
Addition (+): 17
Subtraction (-): 7
Multiplication (*): 60
Division (/): 2.4
Modulus (%): 2
Exponentiation (*): 60

28. Consider three variables $a, $b, $c, apply var_dump() function to evaluate if the values
are equal or not.

Code:
<?php
$a = 10;
$b = "10";
$c = 15;

var_dump($a == $b); // true (values are equal, types not checked)
var_dump($a === $b); // false (values are same, but types are different)
var_dump($a == $c); // false
var_dump($b == $c); // false
?>

Output:
bool(true)
bool(false)
bool(false)
bool(false)

30. Develop a PHP script that generates a random password consisting of a combination of
letters, numbers, and special characters.

Code:
<?php
function generatePassword($length = 10) {
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
    $password = '';

    for ($i = 0; $i < $length; $i++) {
        $randomIndex = rand(0, strlen($chars) - 1);
        $password .= $chars[$randomIndex];
    }

    return $password;
}

echo "Random Password: " . generatePassword();
?>

Output:
Random Password: $XS#V91!DP




ASSIGNMENT-2

31) Remove the first element from an array in PHP using array functions.
<?php
$fruits = array("Apple", "Banana", "Mango", "Orange");
array_shift($fruits);
print_r($fruits);
?>
OUTPUT:
Array
(
    [0] => Banana
    [1] => Mango
    [2] => Orange
)
32) Infer the result of the following PHP code?
A)<?php
$mail = "admin@example.com";
$mail = str_replace("a","@",$mail);
echo "Contact me at $mail.";
?>
OUTPUT:
Contact me at @dmin@ex@mple.com.
B)<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>

OUTPUT:
Array
(
    [2] => emily
)

33) Construct a PHP code to create a multidimensional array representing a matrix and display the value in
the second row and third column.
<?php
$matrix = array(
    array(1, 2, 3),   
    array(4, 5, 6),     
    array(7, 8, 9)    
);
$value = $matrix[1][2];  
echo "The value in the second row and third column is: $value";
?>
OUTPUT:
The value in the second row and third column is: 6
34) Replace all occurrences of a specific word with another word in a string using regular expressions in PHP.
<?php
$text = "PHP is fun. Learning PHP can be very interesting. I love PHP!";
$search = "/\bPHP\b/";
$replace = "Java";
$result = preg_replace($search, $replace, $text);
echo "Original Text: $text<br>";
echo "Modified Text: $result";
?>
OUTPUT:
Original Text: PHP is fun. Learning PHP can be very interesting. I love PHP!<br>Modified Text: Java is fun. Learning Java can be very interesting. I love Java!

35) Write a PHP script using an array that checks if a string contains another string and displays the result.
<?php
$mainString = "PHP is a powerful scripting language for web development.";
$searchWords = array("PHP", "Java", "web", "python");
foreach ($searchWords as $word) {
    if (strpos($mainString, $word) !== false) {
        echo "The string contains '$word'.<br>";
    } else {
        echo "The string does NOT contain '$word'.<br>";
    }
}
?>
OUTPUT:
The string contains 'PHP'.<br>The string does NOT contain 'Java'.<br>The string contains 'web'.<br>The string does NOT contain 'python'.<br>
36) Create an array of fruits in PHP and display the third element.
<?php
$Vegetable= array("Apple", "Banana", "Carrot", "Orange", "Grapes");
echo "The odd one is : " . $Vegetable[2];
?>
OUTPUT:
The odd one is : Carrot
37) Explain Push and Pop in array functions.
PUSH:
<?php
$fruits = array("Apple", "Banana");
array_push($fruits, "Mango", "Orange");

print_r($fruits);
?>

OUTPUT:
Array
(
    [0] => Apple
    [1] => Banana
    [2] => Mango
    [3] => Orange
)
POP:
<?php
$fruits = array("Apple", "Banana", "Mango");
$lastFruit = array_pop($fruits);

echo "Removed: $lastFruit<br>";
print_r($fruits);
?>
OUTPUT:
Removed: Mango<br>Array
(
    [0] => Apple
    [1] => Banana
)
38)Interpret the steps to iterate over a PHP array using a while loop with an example
<?php
$fruits = array("Apple", "Banana", "Mango", "Orange");
$i = 0;
$length = count($fruits);
while ($i < $length) {
    echo "Fruit at index $i: " . $fruits[$i] . "<br>";
    $i++;
}
?>
OUTPUT:
Fruit at index 0: Apple<br>Fruit at index 1: Banana<br>Fruit at index 2: Mango<br>Fruit at index 3: Orange<br>

39) A school wants to automate the calculation of student grades. Design a system that allows teachers to input
student scores, calculates their grades, and generates a summary report. How would you utilize arrays and
array functions to store and process the student data effectively?
<?php
$students = array(
    "Alice" => 85,
    "Bob" => 72,
    "Charlie" => 90,
    "David" => 65,
    "Eva" => 50
);
function getGrade($score) {
    if ($score >= 90) return "A";
    elseif ($score >= 80) return "B";
    elseif ($score >= 70) return "C";
    elseif ($score >= 60) return "D";
    else return "F";
}
echo "<h3>Student Grade Report</h3>";
foreach ($students as $name => $score) {
    $grade = getGrade($score);
    echo "$name - Score: $score - Grade: $grade <br>";
}
$totalStudents = count($students);
$totalScore = array_sum($students);
$average = $totalScore / $totalStudents;
$highest = max($students);
$lowest = min($students);
$topper = array_keys($students, $highest);

echo "<h3>Summary</h3>";
echo "Total Students: $totalStudents <br>";
echo "Average Score: $average <br>";
echo "Highest Score: $highest (Topper: " . implode(", ", $topper) . ")<br>";
echo "Lowest Score: $lowest <br>";
?>
OUTPUT:
Student Grade Report
Alice - Score: 85 - Grade: B 
Bob - Score: 72 - Grade: C 
Charlie - Score: 90 - Grade: A 
David - Score: 65 - Grade: D 
Eva - Score: 50 - Grade: F 

Summary
Total Students: 5 
Average Score: 72.4 
Highest Score: 90 (Topper: Charlie)
Lowest Score: 50 


40) Write a PHP script to remove all characters from a string except a-z A-Z 0-9 or " " using an array.
<?php
$text = "Hello@123!! Welcome_to PHP#World 2025.";
$chars = str_split($text);

$filtered = array_filter($chars, function($ch) {
    return preg_match('/[a-zA-Z0-9 ]/', $ch);
});
$cleanString = implode("", $filtered);
echo "Original String: $text <br>";
echo "Cleaned String: $cleanString";
?>
OUTPUT:
Original String: Hello@123!! Welcome_to PHP#World 2025.
Cleaned String: Hello123 Welcometo PHPWorld 2025

41) How can you use regular expressions to extract all email addresses from a given string using an array in
PHP?
<?php
$text = "Contact us at support@example.com, sales@shop.org or admin123@test.co.in for details.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/";
preg_match_all($pattern, $text, $matches);
$emails = $matches[0];
echo "Extracted Email Addresses:<br>";
foreach ($emails as $email) {
    echo $email . "<br>";
}
?>
OUTPUT:
Extracted Email Addresses:
support@example.com
sales@shop.org
admin123@test.co.in

42) Write a PHP script to find the maximum and minimum marks from the following set of arrays

$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);<?php

$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
$allMarks = array_merge($marks1, $marks2, $marks3);
$maxMark = max($allMarks);
$minMark = min($allMarks);
echo "Maximum Mark: $maxMark <br>";
echo "Minimum Mark: $minMark <br>";
?>
OUTPUT:
Maximum Mark: 635 <br>Minimum Mark: 111 <br>
43) Develop a regular expression pattern that validates a password based on the following criteria: at least 8
characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special
character.
<?php
$passwords = ["Test@123", "weakpass", "NoSpecial123", "StrongPass1$", "Short1!"];
$pattern = "/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/";
foreach ($passwords as $pwd) {
    if (preg_match($pattern, $pwd)) {
        echo "Password '$pwd' is VALID <br>";
    } else {
        echo "Password '$pwd' is INVALID <br>";
    }
}     
?>
OUTPUT:
Password 'Test@123' is VALID <br>Password 'weakpass' is INVALID <br>Password 'NoSpecial123' is INVALID <br>Password 'StrongPass1$' is VALID <br>Password 'Short1!' is INVALID <br>

44) Develop a music playlist management system for a streaming service. The system should allow users to
create, modify, and organize playlists. How would you use arrays and array functions to store and
manipulate the song data and playlist information efficiently?
<?php
$songs = array("Shape of You", "Blinding Lights", "Believer", "Levitating");
$playlist = array();
array_push($playlist, $songs[0], $songs[2], $songs[3]);
echo "<h3>My Playlist</h3>";
foreach ($playlist as $song) {
    echo $song . "<br>";
}
$key = array_search("Believer", $playlist);
if ($key !== false) {
    unset($playlist[$key]);
}
echo "<h3>Summary</h3>";
echo "Total Songs: " . count($playlist);
?>
OUTPUT:
My Playlist
Shape of You
Believer
Levitating

Summary
Total Songs: 2

45) Write a PHP function to compare two multidimensional arrays and return the difference.
<?php
$array1 = array(
    array("id" => 1, "name" => "Alice"),
    array("id" => 2, "name" => "Bob"),
    array("id" => 3, "name" => "Charlie")
);

$array2 = array(
    array("id" => 1, "name" => "Alice"),
    array("id" => 2, "name" => "Bob"),
    array("id" => 3, "name" => "David")
);
$diff = array_udiff($array1, $array2, function($a, $b) {
    return ($a == $b) ? 0 : 1;
});
echo "<pre>";
print_r($diff);
echo "</pre>";
?>
OUTPUT:
Array
(
    [0] => Array
        (
            [id] => 1
            [name] => Alice
        )

    [2] => Array
        (
            [id] => 3
            [name] => Charlie
        )
)
46) Write a PHP program to find the index of a specific value in an array.
<?php
$fruits = array("apple", "banana", "cherry", "mango", "orange");
$search = "mango";
$index = array_search($search, $fruits);
if ($index !== false) {
    echo "The value '$search' is found at index: $index";
} else {
    echo "The value '$search' is not found in the array.";
}
?>
OUTPUT:
The value 'mango' is found at index: 3

47) Delete an element from the below array. And print the array elements in PHP. $x = array (1, 2, 3, 4, 5);
<?php
$x = [1, 2, 3, 4, 5];
unset($x[2]);
$x = array_values($x);
echo implode(' ', $x), PHP_EOL;

OUTPUT:
1 2 4 5 

48. Record number handling in PHP with suitable examples.

<?php
$students = ["Alex", "Brian", "Catherine", "David", "Emma"];
foreach ($students as $recordNo => $name) {
    echo "Record No: " . ($recordNo + 1) . " - Name: $name <br>";
}
?>
OUTPUT:
Record No: 1 - Name: Alex 
Record No: 2 - Name: Brian 
Record No: 3 - Name: Catherine 
Record No: 4 - Name: David 
Record No: 5 - Name: Emma 
49) A sports team wants to evaluate player performance based on various statistical metrics. Design a system
that utilizes numerical types and mathematical operators to calculate performance indices, averages, and
rankings. How would you handle large datasets and perform complex calculations efficiently?
<?php
// Player stats dataset (could come from DB)
$players = [
    ["name" => "Alice", "points" => 20, "assists" => 5, "rebounds" => 8],
    ["name" => "Bob",   "points" => 15, "assists" => 7, "rebounds" => 10],
    ["name" => "Charlie","points" => 25, "assists" => 4, "rebounds" => 6],
];
foreach ($players as &$player) {
    $player['index'] = ($player['points'] * 0.5) +
                       ($player['assists'] * 0.3) +
                       ($player['rebounds'] * 0.2);
}
usort($players, function($a, $b) {
    return $b['index'] <=> $a['index'];
});
$totalIndex = array_sum(array_column($players, 'index'));
$avgIndex   = $totalIndex / count($players);
echo "Average Performance Index: " . number_format($avgIndex, 2) . "\n\n";
foreach ($players as $rank => $player) {
    echo "Rank " . ($rank + 1) . ": {$player['name']} (Index: " . number_format($player['index'], 2) . ")\n";
}
?>
Output:
Average Performance Index: 13.20 Rank 1: Charlie (Index: 14.90) Rank 2: Alice (Index: 13.10) Rank 3: Bob (Index: 11.60) 

50) Construct a PHP script to lower-case and upper-case, all elements in an array.
<?php
$words = ["Apple", "BaNaNa", "Cherry", "MANGO"];
$lowercase = array_map('strtolower', $words);
$uppercase = array_map('strtoupper', $words);
echo "Original Array: " . implode(", ", $words) . "<br>";
echo "Lower-case Array: " . implode(", ", $lowercase) . "<br>";
echo "Upper-case Array: " . implode(", ", $uppercase);
?>
OUTPUT:
Original Array: Apple, BaNaNa, Cherry, MANGO
Lower-case Array: apple, banana, cherry, mango
Upper-case Array: APPLE, BANANA, CHERRY, MANGO

51) Differentiate between array_shift() and array_unshift() in PHP.
<?php
$fruits = ["apple", "banana", "cherry"];
$first = array_shift($fruits);
echo "Removed Element: $first\n";
print_r($fruits);
?>
<br>
<?php
$fruits = ["banana", "cherry"];
$count = array_unshift($fruits, "apple", "mango");

echo "New Array Size: $count\n";
print_r($fruits);
?>
OUTPUT:
Removed Element: apple Array ([0] => banana[1] => cherry ) 
 New Array Size: 4 Array ([0] => apple[1] => mango[2] => banana[3] => cherry ) 

52) Compare stack and queue operations using PHP with appropriate examples.
<?php
// Stack example
$stack = [];
array_push($stack, "A");
array_push($stack, "B");
array_push($stack, "C");

echo "Stack after pushes: ";
print_r($stack);
$last = array_pop($stack);
echo "Popped: $last\n";
echo "Stack after pop: ";
print_r($stack);
?>
<br>
<?php
$queue = [];
array_push($queue, "A");
array_push($queue, "B");
array_push($queue, "C");
echo "Queue after enqueues: ";
print_r($queue);
$first = array_shift($queue);
echo "Dequeued: $first\n";

echo "Queue after dequeue: ";
print_r($queue);
?>
OUTPUT:
Stack after pushes: Array ([0] => A[1] => B[2] => C ) Popped: C Stack after pop: Array ([0] => A[1] => B ) 
 Queue after enqueues: Array ([0] => A[1] => B[2] => C ) Dequeued: A Queue after dequeue: Array ([0] => B[1] => C ) 

53) Demonstrate the difference in behaviour of array_pop() and array_shift() using a numeric array.
<?php
$numbers = [10, 20, 30, 40, 50];

echo "Original Array: ";
print_r($numbers);
$last = array_pop($numbers);
echo "\nAfter array_pop():\n";
echo "Removed Element: $last\n";
print_r($numbers);
$numbers = [10, 20, 30, 40, 50];
$first = array_shift($numbers);
echo "\nAfter array_shift():\n";
echo "Removed Element: $first\n";
print_r($numbers);
?>
OUTPUT:
Original Array: Array ([0] => 10[1] => 20[2] => 30[3] => 40[4] => 50 ) 
After array_pop(): Removed Element: 50 Array ([0] => 10[1] => 20[2] => 30[3] => 40 ) 
After array_shift(): Removed Element: 10 Array ([0] => 20[1] => 30[2] => 40[3] => 50 ) 

54) Design a PHP program that simulates a ticket booking queue using built-in array functions.
<?php
$queue = [];
array_push($queue, "Alice");
array_push($queue, "Bob");
array_push($queue, "Charlie");
array_push($queue, "David");

echo "Initial Queue:\n";
print_r($queue);
$served = array_shift($queue);
echo "\nCustomer served: $served\n";

echo "Queue after serving one customer:\n";
print_r($queue);
array_push($queue, "Eve");
echo "\nAfter new customer joins:\n";
print_r($queue);

$served1 = array_shift($queue);
$served2 = array_shift($queue);
echo "\nCustomers served: $served1, $served2\n";

echo "Final Queue:\n";
print_r($queue);
?>
OUTPUT:
Initial Queue: Array ([0] => Alice[1] => Bob[2] => Charlie[3] => David ) 
Customer served: Alice Queue after serving one customer: Array ([0] => Bob[1] => Charlie[2] => David ) 
After new customer joins: Array ([0] => Bob[1] => Charlie[2] => David[3] => Eve ) 
Customers served: Bob, Charlie Final Queue: Array ([0] => David[1] => Eve ) 

55) Develop a PHP script that uses stack functions to reverse a string.
<?php
$string = "HELLO";
$chars = str_split($string);
$stack = [];
foreach ($chars as $ch) {
    array_push($stack, $ch);
}
$reversed = "";
while (!empty($stack)) {
    $reversed .= array_pop($stack);
}
echo "Original String: $string\n";
echo "Reversed String: $reversed\n";
?>
OUTPUT:
Original String: HELLO Reversed String: OLLEH 

56) What are all the Functions available to sort a PHP array?
<?php
$fruits = ["banana", "apple", "Mango", "cherry", "Apple"];
sort($fruits);
print_r($fruits);
asort($fruits);
print_r($fruits);
$assoc = ["d"=>3, "a"=>1, "c"=>2];
ksort($assoc);
print_r($assoc);
$files = ["file1.txt", "file10.txt", "file2.txt"];
natsort($files);
print_r($files);
?>
Output:
Array ([0] => Apple[1] => Mango[2] => apple[3] => banana[4] => cherry ) 
Array ([0] => Apple[1] => Mango[2] => apple[3] => banana[4] => cherry ) 
Array ([a] => 1[c] => 2[d] => 3 ) 
Array ([0] => file1.txt[2] => file2.txt[1] => file10.txt ) 

57) Outline the Regular Expression with appropriate examples. 
<?php
$text = "Alice and Bob went to New York";
preg_match_all("/\b[A-Z][a-zA-Z]*\b/", $text, $matches);
print_r($matches[0]);
?>
OUTPUT:
Array ([0] => Alice[1] => Bob[2] => New[3] => York ) 

58) Construct a PHP program to extract the mail addresses in the given
string using regular expression.
<?php
$text = "You can contact us at support@example.com, sales@myshop.org or admin123@test.co.in.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,6}/";
preg_match_all($pattern, $text, $matches);

echo "Extracted Email Addresses:\n";
print_r($matches[0]);
?>
OUTPUT:
Extracted Email Addresses: Array ([0] => support@example.com[1] => sales@myshop.org[2] => admin123@test.co.in ) 

59) Create a function that takes an array of numbers as input and returns the average value. 
<?php
function calculateAverage($numbers) {
    if (count($numbers) === 0) {
        return 0; // Avoid division by zero
    }
    $sum = array_sum($numbers);  
    $count = count($numbers);    
    return $sum / $count;        
}
$values = [10, 20, 30, 40, 50];
echo "The average is: " . calculateAverage($values);
?>
OUTPUT:
The average is: 30

60) Write a PHP function to search a specified value within the values of an associative array.
<?php
function searchValueInAssocArray($array, $searchValue) {
    $result = array_keys($array, $searchValue, true); 
    if (!empty($result)) {
        return $result; 
    } else {
        return null; 
    }
}
$students = [
    "101" => "Alice",
    "102" => "Bob",
    "103" => "Charlie",
    "104" => "Bob"
];
$search = "Bob";
$foundKeys = searchValueInAssocArray($students, $search);
if ($foundKeys !== null) {
    echo "Value '$search' found at keys: " . implode(", ", $foundKeys);
} else {
    echo "Value '$search' not found in the array.";
}
?>
OUTPUT:
Value 'Bob' found at keys: 102, 104
61) Recall the steps to delete an element from an array?
<?php
$x = [1, 2, 3, 4, 5];
unset($x[2]);  
print_r($x);
?>
OUTPUT:
Array ([0] => 1[1] => 2[3] => 4[4] => 5 ) 

62) Demonstrate a PHP script which rounds the following values with 1 decimal digit precision.
Sample values : 1.65 1.65 -1.54
<?php
$values = [1.65, 1.65, -1.54];
foreach ($values as $num) {
    echo "Original: $num → Rounded: " . round($num, 1) . "<br>";
}
?>
OUTPUT:
Original: 1.65 → Rounded: 1.7
Original: 1.65 → Rounded: 1.7
Original: -1.54 → Rounded: -1.5

63) Discover a function that takes an array of numbers as input and returns the sum of all the even numbers in
the array.
<?php
function sumEvenNumbers($arr) {
    $sum = 0;
    foreach ($arr as $num) {
        if ($num % 2 == 0) {   
            $sum += $num;
        }
    }
    return $sum;
}
$numbers = [1, 2, 3, 4, 5, 6, 7, 8];
echo "Sum of even numbers: " . sumEvenNumbers($numbers);
?>
output:
Sum of even numbers: 20

64) A retail company wants to forecast future sales based on historical data. Develop a system that utilizes
numerical types, mathematical operators to analyze sales trends, calculate growth rates, and generate
sales forecasts using arrays in php.
<?php
$sales = [1000, 1200, 1350, 1500, 1600, 1750, 1900];
$growthRates = [];
for ($i = 1; $i < count($sales); $i++) {
    $growth = (($sales[$i] - $sales[$i - 1]) / $sales[$i - 1]) * 100; // %
    $growthRates[] = $growth;
}
$averageGrowthRate = array_sum($growthRates) / count($growthRates);
$forecast = [];
$lastSale = end($sales);  // get last known sales
for ($i = 1; $i <= 3; $i++) {
    $lastSale = $lastSale * (1 + $averageGrowthRate / 100);
    $forecast[] = round($lastSale, 2);
}
echo "<h2>Sales Forecast System</h2>";
echo "<b>Historical Sales Data:</b> " . implode(", ", $sales) . "<br><br>";
echo "<b>Monthly Growth Rates (%):</b> " . implode(", ", array_map(fn($v) => round($v, 2), $growthRates)) . "<br>";
echo "<b>Average Growth Rate:</b> " . round($averageGrowthRate, 2) . "%<br><br>";

echo "<b>Forecasted Sales (Next 3 Months):</b> " . implode(", ", $forecast) . "<br>";
?>
OUTPUT:
Sales Forecast System
Historical Sales Data: 1000, 1200, 1350, 1500, 1600, 1750, 1900
Monthly Growth Rates (%): 20, 12.5, 11.11, 6.67, 9.38, 8.57
Average Growth Rate: 11.37%
Forecasted Sales (Next 3 Months): 2116.04, 2356.65, 2624.62
65) Demonstrate PHP script that checks if a string contains another string and displays the result.
<?php
$mainString = "Welcome to PHP programming!";
$search = "PHP";
if (strpos($mainString, $search) !== false) {
    echo "The string contains '$search'.<br>";
} else {
    echo "The string does not contain '$search'.<br>";
}
if (function_exists('str_contains')) {
    if (str_contains($mainString, $search)) {
        echo "(Using str_contains) The string contains '$search'.";
    } else {
        echo "(Using str_contains) The string does not contain '$search'.";
    }
}
?>
OUTPUT:
The string contains 'PHP'.
(Using str_contains) The string contains 'PHP'.

66) Difference between count() and sizeof() function in PHP.
<?php
$fruits = ["apple", "banana", "cherry"];
echo "Using count(): " . count($fruits) . "<br>";
echo "Using sizeof(): " . sizeof($fruits) . "<br>";
?>
OUTPUT:
Using count(): 3
Using sizeof(): 3

67) Construct a program that tokenizes a sentence into words using regular expressions. Then, count the
number of occurrences of each word and display the results.
<?php
$sentence = "PHP is great, and PHP is powerful. PHP is easy to learn!";
$words = preg_split("/\W+/", strtolower($sentence), -1, PREG_SPLIT_NO_EMPTY);
$wordCount = array_count_values($words);
echo "<h3>Word Frequency Count</h3>";
foreach ($wordCount as $word => $count) {
    echo "$word : $count <br>";
}
?>
OUTPUT:
Word Frequency Count
php : 3 
is : 3 
great : 1 
and : 1 
powerful : 1 
easy : 1 
to : 1 
learn : 1 

68) Construct a PHP script that catches a division by zero error using try-catch.
<?php
try {
    $numerator = 10;
    $denominator = 0;
     if ($denominator == 0) {
        throw new DivisionByZeroError("Cannot divide by zero!");
    }
    $result = $numerator / $denominator;
    echo "Result: $result";
    
} catch (DivisionByZeroError $e) {
    echo "Error: " . $e->getMessage();
}
?>
OUTPUT:
Error: Cannot divide by zero!

69) Build a PHP function to change the following array's all values to upper or lower case.

Sample arrays :
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
Expected Output :
Values are in lower case.
Array ( [A] => blue [B] => green [c] => red )
Values are in upper case.
Array ( [A] => BLUE [B] => GREEN [c] => RED )
<?php
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
function arrayToLower($arr) {
    return array_map('strtolower', $arr);
}
function arrayToUpper($arr) {
    return array_map('strtoupper', $arr);
}
echo "Values are in lower case.<br>";
print_r(arrayToLower($Color));
echo "<br><br>Values are in upper case.<br>";
print_r(arrayToUpper($Color));
?>

OUTPUT:
Values are in lower case.
Array ([A] => blue[B] => green[c] => red ) 

Values are in upper case.
Array ([A] => BLUE[B] => GREEN[c] => RED ) 
70) Create a PHP program to take input, a sequence of numbers from the user and store it in a list or array.
<html>
<head>
    <title>Number Sequence Input</title>
</head>
<body>
    <h2>Enter a sequence of numbers separated by commas</h2>
    <form method="post">
        <input type="text" name="numbers" placeholder="e.g. 1,2,3,4,5" required>
        <input type="submit" name="submit" value="Submit">
    </form>
<?php
    if (isset($_POST['submit'])) {
        $input = $_POST['numbers'];
        $numberArray = array_map('trim', explode(',', $input));
        $numberArray = array_map('intval', $numberArray);
        echo "<h3>Your number sequence as an array:</h3>";
        echo "<pre>";
        print_r($numberArray);
        echo "</pre>";
    }
    ?>
</body>
</html>
71. Tell the different file handling modes available in PHP.
<?php
/*
File handling modes in PHP:

1. r  -> Open file for reading only. Starts at beginning of file.
2. r+ -> Open for reading and writing. Starts at beginning of file.
3. w  -> Open for writing only. Erases file content or creates new file.
4. w+ -> Open for reading and writing. Erases file content or creates new file.
5. a  -> Open for writing only. Places file pointer at end of file. Creates file if not exists.
6. a+ -> Open for reading and writing. Places file pointer at end of file.
7. x  -> Create new file for writing. Returns FALSE if file already exists.
8. x+ -> Create new file for reading and writing. Returns FALSE if file already exists.
*/
echo "Different file handling modes explained in comments.";
?>

72. Write the PHP program to implement the following session functions. (i) session_register() (ii) session_unset() (iii) session_destroy()
<?php
session_start(); // start session

// Registering session variable
$_SESSION["username"] = "Admin";

// Display session value
echo "Session Registered: " . $_SESSION["username"] . "<br>";

// Unset session variable
session_unset();
echo "All session variables are unset.<br>";

// Destroy session
session_destroy();
echo "Session destroyed.";
?>

73. Develop a PHP program to display an error message when a file other than jpg or png is uploaded.
<?php
if(isset($_FILES['file'])){
    $file_name = $_FILES['file']['name'];
    $file_ext = strtolower(pathinfo($file_name, PATHINFO_EXTENSION));

    if($file_ext == "jpg" || $file_ext == "png"){
        echo "File uploaded successfully.";
    } else {
        echo "Error: Only JPG or PNG files are allowed!";
    }
}
?>

<!-- Simple upload form -->
<form method="post" enctype="multipart/form-data">
    Select file: <input type="file" name="file">
    <input type="submit" value="Upload">
</form>

74. Outline the file reading and writing functions of PHP with suitable examples.
<?php
// Writing to a file
$file = fopen("demo.txt", "w");
fwrite($file, "Hello, this is a test file.\n");
fclose($file);

// Reading from a file
$file = fopen("demo.txt", "r");
$content = fread($file, filesize("demo.txt"));
fclose($file);

echo "File Content: <br>" . nl2br($content);
?>

75. Build a PHP function that takes the filename and a new line of content as input. Append the new line of content as a new line at the end of the file.
<?php
function appendToFile($filename, $newline){
    $file = fopen($filename, "a"); // open in append mode
    fwrite($file, $newline . "\n");
    fclose($file);
    echo "Line appended successfully!";
}

// Example call
appendToFile("demo.txt", "This is a new appended line.");
?>

76. Write a simple 'birthday countdown' script, the script will count the number of days between current day and birthday.
<?php
$today = strtotime(date("Y-m-d"));
$birthday = strtotime("2025-12-25"); // change date to your birthday

$diff = $birthday - $today;
$days = ceil($diff / (60 * 60 * 24));

if($days > 0){
    echo "Your birthday is in $days days!";
} elseif($days == 0){
    echo "Happy Birthday!";
} else {
    echo "Your birthday has passed this year.";
}
?>

77. Classify the various network functions which provide network information or functions.
<?php
/*
Common Network Functions in PHP:

1. gethostbyname()  -> Returns the IPv4 address of a host.
2. gethostbyaddr()  -> Returns the host name of an IP address.
3. gethostbynamel() -> Returns a list of IPv4 addresses for a host.
4. ip2long()        -> Converts IP address to long integer.
5. long2ip()        -> Converts long integer back to IP address.
6. dns_check_record()-> Checks DNS record for a given host.
*/
echo "Network functions explained in comments.";
?>

78.Elucidate the steps to read and delete existing cookies in the browser.
<?php
// Reading cookie
if(isset($_COOKIE['user'])){
    echo "Cookie Value: " . $_COOKIE['user'] . "<br>";
} else {
    echo "No cookie found.<br>";
}

// Deleting cookie (set expiry time in past)
setcookie("user", "", time()-3600, "/");
echo "Cookie deleted.";
?>

79. Create a PHP program to append two files in another file.
<?php
$file1 = "file1.txt";
$file2 = "file2.txt";
$file3 = "merged.txt";

$content1 = file_get_contents($file1);
$content2 = file_get_contents($file2);

file_put_contents($file3, $content1 . "\n" . $content2);

echo "Files appended successfully into merged.txt";
?>

80. Build a test cookie with the setcookie( ) function using PHP.
<?php
// Create a cookie
setcookie("testCookie", "HelloCookie", time() + 3600, "/");

// Read cookie
if(isset($_COOKIE['testCookie'])){
    echo "Cookie Value: " . $_COOKIE['testCookie'];
} else {
    echo "Cookie not set yet.";
}
?>

81. Create Admin Login, Logout form using session variables in PHP.
<?php
session_start();

if(isset($_POST['login'])){
    $username = $_POST['username'];
    $password = $_POST['password'];

    if($username == "admin" && $password == "1234"){
        $_SESSION['admin'] = $username;
        echo "Login successful. <a href='?logout=true'>Logout</a>";
    } else {
        echo "Invalid credentials!";
    }
}

if(isset($_GET['logout'])){
    session_destroy();
    echo "Logged out successfully.";
}
?>

<form method="post">
    Username: <input type="text" name="username"><br><br>
    Password: <input type="password" name="password"><br><br>
    <input type="submit" name="login" value="Login">
</form>

82. Implement the setcookie( ) function with various arguments using the PHP program.
<?php
// setcookie(name, value, expire, path, domain, secure, httponly)

// 1. Simple cookie
setcookie("user", "Admin", time() + 3600);

// 2. Cookie with path
setcookie("pathCookie", "PathTest", time() + 3600, "/");

// 3. Secure cookie (works only with HTTPS)
setcookie("secureCookie", "SecureValue", time() + 3600, "/", "", true);

// Display message
echo "Different cookies have been set!";
?>

83. Develop a PHP script to accept email addresses and validate it. Display the domain name of the email and result of validation.
<?php
if(isset($_POST['email'])){
    $email = $_POST['email'];
    if(filter_var($email, FILTER_VALIDATE_EMAIL)){
        $domain = substr(strrchr($email, "@"), 1);
        echo "Valid Email!<br>";
        echo "Domain: " . $domain;
    } else {
        echo "Invalid Email!";
    }
}
?>

<form method="post">
    Enter Email: <input type="text" name="email">
    <input type="submit" value="Check">
</form>

84. Implement a PHP program that creates sessions, sets values in sessions, and removes data from the sessions.
<?php
session_start();

// Create session
$_SESSION['name'] = "John";
$_SESSION['role'] = "Admin";

// Display session values
echo "Name: " . $_SESSION['name'] . "<br>";
echo "Role: " . $_SESSION['role'] . "<br>";

// Remove a session variable
unset($_SESSION['role']);
echo "Role removed.<br>";

// Destroy session
session_destroy();
echo "All sessions destroyed.";
?>

85. List the steps to get file name from a path in PHP.
<?php
$path = "C:/xampp/htdocs/project/demo.txt";

// Get file name with extension
echo "File with extension: " . basename($path) . "<br>";

// Get file name without extension
echo "File without extension: " . pathinfo($path, PATHINFO_FILENAME) . "<br>";

// Get only extension
echo "File extension: " . pathinfo($path, PATHINFO_EXTENSION);
?>

86. PHP File functions with example program.
<?php
/*
Common File Functions in PHP:
1. fopen()   -> Open a file
2. fread()   -> Read from file
3. fwrite()  -> Write to file
4. fclose()  -> Close file
5. file_get_contents() -> Read entire file into string
6. file_put_contents() -> Write string into file
7. unlink()  -> Delete file
*/

$file = fopen("sample.txt", "w");
fwrite($file, "Hello PHP File Functions!");
fclose($file);

echo "Data written to file successfully.";
?>

87. Create a PHP Admin Login, Logout form using session variables.
<?php
session_start();

if(isset($_POST['login'])){
    $user = $_POST['user'];
    $pass = $_POST['pass'];

    if($user == "admin" && $pass == "1234"){
        $_SESSION['admin'] = $user;
        echo "Welcome Admin! <a href='?logout=true'>Logout</a>";
    } else {
        echo "Invalid Username or Password!";
    }
}

if(isset($_GET['logout'])){
    session_destroy();
    echo "You have logged out.";
}
?>

<form method="post">
    Username: <input type="text" name="user"><br><br>
    Password: <input type="password" name="pass"><br><br>
    <input type="submit" name="login" value="Login">
</form>

88. Generate a simple PHP 'birthday countdown' script, the script will count the number of days between current day and birthday.
<?php
$today = strtotime(date("Y-m-d"));
$birthday = strtotime("2025-11-10"); // change date to your birthday

$diff = $birthday - $today;
$days = ceil($diff / (60 * 60 * 24));

if($days > 0){
    echo "Birthday is in $days days!";
} elseif($days == 0){
    echo "Happy Birthday!";
} else {
    echo "Birthday has already passed.";
}
?>

89. Construct a PHP program to read a file using file operation.
<?php
$file = fopen("sample.txt", "r");

if($file){
    while(!feof($file)){
        echo fgets($file) . "<br>";
    }
    fclose($file);
} else {
    echo "Unable to open file!";
}
?>

90. Write a PHP program to open a text file and print all the data in it.
<?php
$filename = "sample.txt";

if(file_exists($filename)){
    $data = file_get_contents($filename);
    echo nl2br($data);
} else {
    echo "File does not exist!";
}
?>

91. Recognize how sessions are stored in PHP?
<?php
/*
Sessions in PHP are stored on the server.
- By default, session data is stored in temporary files on the server (e.g., /tmp folder).
- Each session has a unique session ID.
- The session ID is stored on the client side as a cookie (PHPSESSID).
- The server uses this ID to match and retrieve session data.
*/
echo "Sessions are stored on the server with a unique session ID linked via PHPSESSID cookie.";
?>

92. Apply the various steps involved to get cookie value using server-side scripting.
<?php
// Step 1: Set a cookie
setcookie("username", "JohnDoe", time() + 3600, "/");

// Step 2: Access the cookie value
if(isset($_COOKIE['username'])){
    echo "Cookie Value: " . $_COOKIE['username'];
} else {
    echo "Cookie not found.";
}
?>

93. Write a PHP program that keeps track of how many times a visitor has loaded the page.
<?php
session_start();

if(isset($_SESSION['views'])){
    $_SESSION['views'] = $_SESSION['views'] + 1;
} else {
    $_SESSION['views'] = 1;
}

echo "You have visited this page " . $_SESSION['views'] . " times.";
?>

94. Evaluate the different file handling modes available in PHP with appropriate examples.
<?php
/*
Modes:
r  -> Read only
w  -> Write only, clears file
a  -> Append
x  -> Create new file, fail if exists
r+ -> Read/Write, pointer at start
w+ -> Read/Write, clears file
a+ -> Read/Write, pointer at end
x+ -> Read/Write, fail if file exists
*/

$file = fopen("example.txt", "w");
fwrite($file, "Hello File Handling!");
fclose($file);

echo "File created and written successfully.";
?>

95. Discuss the purpose and functionality of PHP sessions and outline their potential application in maintaining a user's shopping cart state across multiple pages.
<?php
/*
Purpose of PHP Sessions:
- Sessions allow data to be stored on the server and used across multiple pages.
- Each user is given a unique session ID stored in a cookie.

Functionality:
- Store user information like login data, preferences, shopping cart items.
- Values can be accessed until the session is destroyed.

Application in Shopping Cart:
- Store selected items, quantities, and prices in $_SESSION.
- Retrieve session data on checkout page to display final bill.
- Maintains cart state across multiple pages until checkout is complete.
*/
echo "Sessions are used to maintain state, e.g., storing items in a shopping cart across multiple pages.";
?>

96. How to register a variable in a PHP session? Give an example.
<?php
session_start();

// Registering session variable
$_SESSION['username'] = "Admin";

echo "Session variable registered: " . $_SESSION['username'];
?>

97. Discover the various session functions of PHP. Explain its behavior.
<?php
/*
Common Session Functions:

1. session_start()   -> Starts a new session or resumes existing one.
2. session_id()      -> Returns the current session ID.
3. session_name()    -> Returns or sets the name of the session.
4. session_unset()   -> Frees all session variables.
5. session_destroy() -> Destroys all data associated with the session.
6. session_regenerate_id() -> Generates a new session ID.

Example:
*/
session_start();
$_SESSION['user'] = "John";
echo "User: " . $_SESSION['user'] . "<br>";
echo "Session ID: " . session_id();
?>

98. Model an Admin Login, Logout form using session variables in PHP.
<?php
session_start();

if(isset($_POST['login'])){
    $user = $_POST['user'];
    $pass = $_POST['pass'];

    if($user == "admin" && $pass == "1234"){
        $_SESSION['admin'] = $user;
        echo "Welcome Admin! <a href='?logout=true'>Logout</a>";
    } else {
        echo "Invalid login!";
    }
}

if(isset($_GET['logout'])){
    session_destroy();
    echo "You are logged out.";
}
?>

<form method="post">
    Username: <input type="text" name="user"><br><br>
    Password: <input type="password" name="pass"><br><br>
    <input type="submit" name="login" value="Login">
</form>

99. Build a PHP program to apply the following tasks using session.

(a) Initiate a session (or pick up an existing one).
(b) Check for the existence of a pre-existing entry in $_SESSION. If not present, assume that the session is new.
(c) Increment a counter that tracks how many times that the user has visited this page.
(d) Store the incremented counter back in $_SESSION.
(e) Provide a link back to the page itself, embedding the session ID as an argument if it is found.
(f) Restrict the user from uploading the same file again and again. If the same file already exists in that folder, display an appropriate error message.

<?php
session_start();

// (a) Session starts above

// (b)(c)(d) Page visit counter
if(!isset($_SESSION['counter'])){
    $_SESSION['counter'] = 1;
    echo "New session started. First visit.<br>";
} else {
    $_SESSION['counter']++;
    echo "You have visited this page " . $_SESSION['counter'] . " times.<br>";
}

// (e) Link with session ID
echo "<a href='?sid=" . session_id() . "'>Reload with Session ID</a><br><br>";

// (f) File upload restriction
if(isset($_FILES['file'])){
    $filename = $_FILES['file']['name'];
    $target = "uploads/" . $filename;

    if(file_exists($target)){
        echo "Error: File already exists!";
    } else {
        move_uploaded_file($_FILES['file']['tmp_name'], $target);
        echo "File uploaded successfully!";
    }
}
?>

<form method="post" enctype="multipart/form-data">
    Upload File: <input type="file" name="file">
    <input type="submit" value="Upload">
</form>


100. Using PHP, construct a program to restrict the user from uploading the same file again and again. If the same file already exists in that folder, display an appropriate error message.
<?php
if(isset($_FILES['file'])){
    $filename = $_FILES['file']['name'];
    $target = "uploads/" . $filename;

    if(file_exists($target)){
        echo "Error: The file '$filename' already exists!";
    } else {
        move_uploaded_file($_FILES['file']['tmp_name'], $target);
        echo "File uploaded successfully.";
    }
}
?>

<form method="post" enctype="multipart/form-data">
    Choose File: <input type="file" name="file">
    <input type="submit" value="Upload">
</form>

101. Identify, how a cookie’s value can be retrieved in a web application?
<?php
// Set a cookie
setcookie("user", "JohnDoe", time() + 3600, "/");

// Retrieve cookie value
if(isset($_COOKIE['user'])){
    echo "Cookie Value: " . $_COOKIE['user'];
} else {
    echo "Cookie not found.";
}
?>

102. Develop a PHP program to use session variables and start a session.
<?php
session_start(); // Start session

// Set session variables
$_SESSION['username'] = "Admin";
$_SESSION['role'] = "Manager";

// Display session variables
echo "Username: " . $_SESSION['username'] . "<br>";
echo "Role: " . $_SESSION['role'];
?>

103. Create a very simple pageview counter by using ‘isset’ to check if the pageview variable has already been created.
<?php
session_start();

if(isset($_SESSION['pageview'])){
    $_SESSION['pageview']++;
} else {
    $_SESSION['pageview'] = 1;
}

echo "This page has been viewed " . $_SESSION['pageview'] . " times.";
?>

104. Formulate a PHP program to open a text file and print the nth line in the text file. If the nth line does not exist print 'no data'.
<?php
function printNthLine($filename, $n){
    $file = file($filename); // read file into array
    if(isset($file[$n-1])){
        echo "Line $n: " . $file[$n-1];
    } else {
        echo "no data";
    }
}

// Example usage
printNthLine("sample.txt", 3); // change 3 to desired line number
?>

105. Write a PHP function to get the start and end date of a week (by week number) of a particular year.
<?php
function getWeekDateRange($year, $week){
    $dto = new DateTime();
    $dto->setISODate($year, $week);
    $start = $dto->format('Y-m-d');
    $dto->modify('+6 days');
    $end = $dto->format('Y-m-d');
    return array($start, $end);
}

// Example usage
list($start, $end) = getWeekDateRange(2025, 38);
echo "Week 38 of 2025 starts on $start and ends on $end.";
?>

